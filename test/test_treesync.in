/* -*- c -*- */

header
{
##include "lptree/private.h"
##include "lptree/lpttree.h"
##include "lptree/lptnspecdir.h"
##include "lptree/lptnspecint.h"
##include "los/lostest.h"
}

data
{
  LptTree *t1, *t2;
  LptNSpec *ns_dir, *ns_int;
}

setup
{
  l_trash_push();
  data->ns_dir = L_TRASH_OBJECT
    (lpt_nspec_dir_new("DIR"));
  data->ns_int = L_TRASH_OBJECT
    (lpt_nspec_int_new("INT", G_MININT, G_MAXINT, 0));
  /* tree 1 */
  data->t1 = L_TRASH_OBJECT
    (lpt_tree_new());
  lpt_tree_create_node(data->t1, "/share1", data->ns_dir);
  lpt_tree_create_node(data->t1, "/share1/node1", data->ns_int);
  /* tree 2 */
  data->t2 = L_TRASH_OBJECT
    (lpt_tree_new());
}

teardown
{
  l_trash_pop();
}

header
{
  static void message_handler ( LptTree *tree,
                                LptClient *client,
                                LObject *message,
                                gpointer data_ )
  {
    GHashTable *cmap = data_;
    LptClient *dest_client;
    dest_client = g_hash_table_lookup(cmap, client);
    ASSERT(dest_client);
    /* fprintf(stderr, "\n[FIXME] message_handler: %s\n", l_object_to_string(message)); */
    lpt_tree_handle_message(lpt_client_get_tree(dest_client),
                            dest_client, message);
  }
}

#define CHECK_NODE_DIR(n_) do {                 \
    LptNode *n = (n_);                          \
    PIF_CHECK(n);                               \
    PIF_CHECK(LPT_IS_NSPEC_DIR(n->nspec));      \
  } while (0)

#define CHECK_NODE_INT(n_, val) do {                \
    LptNode *n = (n_);                              \
    PIF_CHECK(n);                                   \
    PIF_CHECK(LPT_IS_NSPEC_INT(n->nspec));          \
    LOS_CHECK_INT(L_TRASH_OBJECT                    \
                  (lpt_node_get_value(n)), (val));  \
  } while (0)

test
{
  LptClient *t1_c2, *t2_c1;
  GHashTable *t1_cmap, *t2_cmap;
  /* setup the handlers */
  t1_cmap = g_hash_table_new(NULL, NULL);
  t2_cmap = g_hash_table_new(NULL, NULL);
  lpt_tree_set_message_handler(data->t1, message_handler, 
                               t1_cmap, (GDestroyNotify) g_hash_table_unref);
  lpt_tree_set_message_handler(data->t2, message_handler,
                               t2_cmap, (GDestroyNotify) g_hash_table_unref);
  /* setup the shares */
  lpt_tree_create_share(data->t1, "SHARE1", "/share1", 0);
  /* create the clients */
  PIF_CHECK((t1_c2 = lpt_tree_add_client(data->t1, "t2")));
  PIF_CHECK((t2_c1 = lpt_tree_add_client(data->t2, "t1")));
  PIF_CHECK_EQ_PTR(lpt_client_get_tree(t1_c2), data->t1);
  PIF_CHECK_EQ_PTR(lpt_client_get_tree(t2_c1), data->t2);
  g_hash_table_insert(t1_cmap, t1_c2, t2_c1);
  g_hash_table_insert(t2_cmap, t2_c1, t1_c2);
  /* fix source values */
  lpt_node_set_value(lpt_tree_get_node(data->t1, "/share1/node1"),
                     L_TRASH_OBJECT(l_int_new(2)));
  /* connection */
  lpt_tree_connect_share(data->t2, t2_c1, "SHARE1", "/dest-share1", 0);
  CHECK_NODE_DIR(lpt_tree_get_node(data->t2, "/dest-share1"));
  CHECK_NODE_INT(lpt_tree_get_node(data->t2, "/dest-share1/node1"), 2);
  /* change some value */
  lpt_node_set_value(lpt_tree_get_node(data->t1, "/share1/node1"),
                     L_TRASH_OBJECT(l_int_new(3)));
  CHECK_NODE_INT(lpt_tree_get_node(data->t2, "/dest-share1/node1"), 3);
}
