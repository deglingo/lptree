/* -*- c -*- */

header {
##include "lptree/lptnspecint.h"
##include "lptree/lptnspecdir.h"
##include "lptree/lptnode.h"
}

unit /* node-int */
{
  data {
    LptNSpec *ns_int, *ns_dir;
    LptNode *node;
  }

  setup {
    l_trash_push();
    data->ns_int = L_TRASH_OBJECT
      (lpt_nspec_int_new("INT", -10, 10, 2));
    data->ns_dir = L_TRASH_OBJECT
      (lpt_nspec_dir_new("DIR"));
    data->node = lpt_node_new(data->ns_int);
  }

  teardown {
    L_OBJECT_CLEAR(data->node);
    l_trash_pop();
  }

  test { 
    PIF_CHECK(data->node);
    PIF_CHECK(LPT_IS_NSPEC_INT(lpt_node_get_nspec(data->node)));
  }

  test {
    LObject *val;
    val = L_OBJECT(l_int_new(42));
    lpt_node_set_value(data->node, val);
    L_OBJECT_CLEAR(val);
    val = lpt_node_get_value(data->node);
    PIF_CHECK(L_IS_INT(val));
    PIF_CHECK(L_INT_VALUE(val) == 42);
    L_OBJECT_CLEAR(val);
  }

  test add
  {
    LptNode *ndir = L_TRASH_OBJECT
      (lpt_node_new(data->ns_dir));
    LptNode *nchild1 = L_TRASH_OBJECT
      (lpt_node_new(data->ns_int));
    LptNode *nchild2 = L_TRASH_OBJECT
      (lpt_node_new(data->ns_int));
    LObject *key1 = L_TRASH_OBJECT(l_string_new("child1"));
    LObject *key2 = L_TRASH_OBJECT(l_string_new("child2"));
    lpt_node_add(ndir, nchild1, key1);
    lpt_node_add(ndir, nchild2, key2);
    PIF_CHECK_EQ_PTR(lpt_node_get_child(ndir, key1), nchild1);
    PIF_CHECK_EQ_PTR(lpt_node_get_child(ndir, key2), nchild2);
  }

  test get_n_children
  {
    LptNode *ndir = L_TRASH_OBJECT
      (lpt_node_new(data->ns_dir));
    LptNode *nchild1 = L_TRASH_OBJECT
      (lpt_node_new(data->ns_int));
    LptNode *nchild2 = L_TRASH_OBJECT
      (lpt_node_new(data->ns_int));
    LObject *key1 = L_TRASH_OBJECT(l_string_new("child1"));
    LObject *key2 = L_TRASH_OBJECT(l_string_new("child2"));
    PIF_CHECK_EQ(lpt_node_get_n_children(ndir), 0);
    lpt_node_add(ndir, nchild1, key1);
    PIF_CHECK_EQ(lpt_node_get_n_children(ndir), 1);
    lpt_node_add(ndir, nchild2, key2);
    PIF_CHECK_EQ(lpt_node_get_n_children(ndir), 2);
  }

  header
    {
      struct foreach_data
      {
        GList *nodes;
      };

      static void foreach_func ( LptNode *node,
                                 gpointer data_ )
      {
        struct foreach_data *data = data_;
        data->nodes = g_list_append(data->nodes, node);
      }
    }

  test foreach
  {
    struct foreach_data fdata;
    LptNode *ndir = L_TRASH_OBJECT
      (lpt_node_new(data->ns_dir));
    LptNode *nchild1 = L_TRASH_OBJECT
      (lpt_node_new(data->ns_int));
    LptNode *nchild2 = L_TRASH_OBJECT
      (lpt_node_new(data->ns_int));
    LObject *key1 = L_TRASH_OBJECT(l_string_new("child1"));
    LObject *key2 = L_TRASH_OBJECT(l_string_new("child2"));
    lpt_node_add(ndir, nchild1, key1);
    lpt_node_add(ndir, nchild2, key2);
    /* go */
    fdata.nodes = NULL;
    lpt_node_foreach(ndir, foreach_func, &fdata);
    PIF_CHECK_EQ(g_list_length(fdata.nodes), 2);
    PIF_CHECK_EQ_PTR(g_list_nth_data(fdata.nodes, 0), nchild1);
    PIF_CHECK_EQ_PTR(g_list_nth_data(fdata.nodes, 1), nchild2);
    g_list_free(fdata.nodes);
  }
}
