/* -*- c -*- */

header
{
##include "lptree/lptree.h"
}

header
{
  static GHashTable *client_map_new ( void )
  {
    return g_hash_table_new(NULL, NULL);
  }

  static void client_map_free ( GHashTable *cmap )
  {
    g_hash_table_unref(cmap);
  }

  static void client_map_add ( GHashTable *cmap,
                               LptProxyClient *c1,
                               LptProxyClient *c2 )
  {
    g_hash_table_insert(cmap, c1, c2);
    g_hash_table_insert(cmap, c2, c1);
  }

  static LptProxyClient *client_map_get ( GHashTable *client_map,
                                          LptProxyClient *c1 )
  {
    gpointer c2 = g_hash_table_lookup(client_map, c1);
    if (!c2) {
      fprintf(stderr, "\nERROR: client not found: %p\n", c1);
      abort();
    }
    return (LptProxyClient *) c2;
  }
}

setup
{
  l_trash_push();
}

teardown
{
  l_trash_pop();
}

/* test new */
/* {  */
/*   PIF_CHECK(data->proxy); */
/* } */

/* test create_share */
/* { */
/*   lpt_proxy_create_share(data->proxy, "TESTSHARE", "/", 0); */
/* } */

/* test connect_client */
/* { */
/*   lpt_proxy_connect_client(data->proxy, 1); */
/* } */

/* test complete */
/* { */
/*   LptTree *client_tree; */
/*   LptProxy *client_proxy; */
/*   GHashTable *client_map = l_trash_add */
/*     (client_map_new(), (LTrashFunc) client_map_free); */
/*   /\* setup the server side *\/ */
/*   setup_test_tree(data->tree); */
/*   lpt_proxy_create_share(data->proxy, "SHARE1", "/share1", 0); */
/*   lpt_proxy_create_share(data->proxy, "SHARE2", "/share2", 0); */
/*   lpt_proxy_connect_client(data->proxy, 1); */
/*   client_map_add(client_map, 1, data->proxy); */
/*   /\* setup the client side *\/ */
/*   client_tree = L_TRASH_OBJECT(lpt_tree_new()); */
/*   client_proxy = L_TRASH_OBJECT(lpt_proxy_new(client_tree, proxy_handler, client_map)); */
/*   client_map_add(data->client_map, 1, client_proxy); */
/*   lpt_proxy_connect_client(client_proxy, 1); */
/*   lpt_proxy_connect_share(client_proxy, 1, "SHARE1", "/dest-share1", 0); */
/*   lpt_proxy_connect_share(client_proxy, 1, "SHARE2", "/dest-share2", 0); */
/*   /\* /\\* check *\\/ *\/ */
/*   PIF_CHECK(lpt_tree_get_node(client_tree, "/dest-share1")); */
/*   PIF_CHECK(lpt_tree_get_node(client_tree, "/dest-share1/node1")); */
/*   PIF_CHECK(lpt_tree_get_node(client_tree, "/dest-share2")); */
/*   PIF_CHECK(lpt_tree_get_node(client_tree, "/dest-share2/node1")); */
/* } */

/********************************************************************/

header
{
  static void _proxy_handler ( LptProxy *proxy,
                               LptProxyClient *client,
                               LObject *msg,
                               gpointer data )
  {
    GHashTable *cmap = data;
    LptProxyClient *dest_client = client_map_get(cmap, client);
    LptProxy *dest = lpt_proxy_client_get_proxy(dest_client);
    lpt_proxy_handle_message(dest, dest_client, msg);
  }

  static LptProxy *_setup_server_proxy ( GHashTable *cmap )
  {
    LptNSpec *ns_dir = L_TRASH_OBJECT
      (lpt_nspec_dir_new("DIR"));
    LptNSpec *ns_int = L_TRASH_OBJECT
      (lpt_nspec_int_new("INT", 0, 10, 0));
    LptTree *tree = L_TRASH_OBJECT
      (lpt_tree_new());
    lpt_tree_create_node(tree, "/share1", ns_dir);
    lpt_tree_create_node(tree, "/share1/node1", ns_int);
    return L_TRASH_OBJECT
      (lpt_proxy_new(tree, _proxy_handler, cmap));
  }

  static LptProxy *_setup_client_proxy ( GHashTable *cmap )
  {
    LptTree *tree = L_TRASH_OBJECT
      (lpt_tree_new());
    LptProxy *proxy = L_TRASH_OBJECT
      (lpt_proxy_new(tree, _proxy_handler, cmap));
    return proxy;
  }
}

test new_complete
{
  GHashTable *cmap = l_trash_add
    (client_map_new(), (LTrashFunc) client_map_free);
  LptProxy *proxy1 = _setup_server_proxy(cmap);
  LptProxy *proxy2 = _setup_client_proxy(cmap);
  LptProxyClient *p1_p2, *p2_p1;
  /* create the share on server side */
  lpt_proxy_create_share(proxy1, "SHARE1", "/share1", 0);
  /* create the clients */
  PIF_CHECK((p1_p2 = lpt_proxy_create_client(proxy1)));
  PIF_CHECK((p2_p1 = lpt_proxy_create_client(proxy2)));
  client_map_add(cmap, p1_p2, p2_p1);
  /* connect client to server's share */
  lpt_proxy_connect_share(proxy2, p2_p1, "SHARE1", "/dest-share1", 0);
}
