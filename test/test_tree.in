/* -*- c -*- */

header {
##include "test/lptcheck.h"
##include "lptree/lptree.h"
}

data
{
  LptTree *tree;
}

setup
{
  l_trash_push();
  data->tree = L_TRASH_OBJECT(lpt_tree_new());
}

teardown
{
  l_trash_pop();
}

test new
{ 
  PIF_CHECK(data->tree);
  PIF_CHECK(data->tree->root); /* ?? */
  PIF_CHECK_EQ_PTR(lpt_node_get_tree(data->tree->root), data->tree);
}

unit
{
  data
    {
      LptNSpec *nspec_dir;
      LptNSpec *nspec_int;
    }
  
  setup
    {
      data->nspec_dir = L_TRASH_OBJECT
        (lpt_nspec_dir_new("DIR"));
      data->nspec_int = L_TRASH_OBJECT
        (lpt_nspec_int_new("INT", -10, 10, 0));
    }

  test create_get_node
  {
    LptNode *n_a, *n_b, *n_aa, *n_ab, *n_ba, *n_bb;
    /* create the tree */
    PIF_CHECK
      (n_a = lpt_tree_create_node(data->tree, "/a", data->nspec_dir));
    PIF_CHECK
      (n_aa = lpt_tree_create_node(data->tree, "/a/a", data->nspec_int));
    PIF_CHECK
      (n_ab = lpt_tree_create_node(data->tree, "/a/b", data->nspec_int));
    PIF_CHECK
      (n_b = lpt_tree_create_node(data->tree, "/b", data->nspec_dir));
    PIF_CHECK
      (n_ba = lpt_tree_create_node(data->tree, "/b/a", data->nspec_int));
    PIF_CHECK
      (n_bb = lpt_tree_create_node(data->tree, "/b/b", data->nspec_int));
    /* check get_node() */
    PIF_CHECK_EQ_PTR
      (lpt_tree_get_node(data->tree, "/a"), n_a);
    PIF_CHECK_EQ_PTR
      (lpt_tree_get_node(data->tree, "/a/a"), n_aa);
    PIF_CHECK_EQ_PTR
      (lpt_tree_get_node(data->tree, "/a/b"), n_ab);
    PIF_CHECK_EQ_PTR
      (lpt_tree_get_node(data->tree, "/b"), n_b);
    PIF_CHECK_EQ_PTR
      (lpt_tree_get_node(data->tree, "/b/a"), n_ba);
    PIF_CHECK_EQ_PTR
      (lpt_tree_get_node(data->tree, "/b/b"), n_bb);
    /* make sure all nodes are attached to the tree */
    PIF_CHECK_EQ_PTR(lpt_node_get_tree(n_a), data->tree);
    PIF_CHECK_EQ_PTR(lpt_node_get_tree(n_aa), data->tree);
    PIF_CHECK_EQ_PTR(lpt_node_get_tree(n_ab), data->tree);
    PIF_CHECK_EQ_PTR(lpt_node_get_tree(n_b), data->tree);
    PIF_CHECK_EQ_PTR(lpt_node_get_tree(n_ba), data->tree);
    PIF_CHECK_EQ_PTR(lpt_node_get_tree(n_bb), data->tree);
  }

  test add_subtree
  {
    LptNode *n1, *n2;
    n1 = L_TRASH_OBJECT(lpt_node_new(data->nspec_dir));
    n2 = L_TRASH_OBJECT(lpt_node_new(data->nspec_dir));
    lpt_node_add(n1, n2, L_TRASH_OBJECT(l_string_new("n2")));
    lpt_node_add(data->tree->root, n1, L_TRASH_OBJECT(l_string_new("n1")));
    check_node_tree(data->tree->root, data->tree);
  }

  header
  {
    struct hook_data
    {
      guint n_calls;
    };

    static gboolean _hook_func ( LptEvent *event,
                                 gpointer data_ )
    {
      struct hook_data *data = data_;
      data->n_calls++;
      /* fprintf(stderr, "\n[TODO] hook_func\n"); */
      return TRUE;
    }
  }

  test hook
  {
    struct hook_data hdata;
    LptHook *hook;
    LptNode *n;
    n = lpt_tree_create_node(data->tree, "/n", data->nspec_int);
    /* create the hook */
    hdata.n_calls = 0;
    hook = lpt_tree_add_hook(data->tree, _hook_func, 0, &hdata, NULL);
    PIF_CHECK(hook);
    /* set_value event */
    lpt_node_set_value(n, L_TRASH_OBJECT(l_int_new(1)));
    PIF_CHECK_EQ(hdata.n_calls, 1);
  }
}
